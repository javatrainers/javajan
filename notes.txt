 Procedure oriented programming : task oriented
Object oriented programming : modular approach

launchRocket = Complicate, not flexible

Rocket
	Fuel tank
		pump fuel
	exhaust chamber
		exhuast flame
	propulsion
		burn fuel combust
	cockpit
		astronaut work
	
	
	
	
	BankingAccount
		accountNumber, customername, deposit,interestRate,
		transfer,security, money,withdraw
	
	Method = functions	
	(Action)Does a : deposit,transfer,secutiry,withdraw, updateAddres
		deposit = balance increases
		transfer = balance decreases
		updateAddress = address change
			
	Variable = anything whose value tend to change
	(Attributes) Has a : accountNumber, customerName,interstRate,balance
		
	
	Amazon
		product, buyer, seller, reviews, add2Cart, checkout, name,address
	
	
	java program
	{
		attribute/variable
		
		action/method
			logic
	
	}
	
	Bank java program
	{
		funds
		
		deposit
			fund increases
	
	}
	
	
	
FacebookCustomer
	has-a 
		name,address,friends,age
		
		
Architect : develops/creates HOUSE PLAN(blueprint)
builder : constructs house real estate land(Space)

java programmer : develop(code) plan(blueprint) for FB customer
Java platform : constructs digital FB customer in memory(space)

heritage
inherit - accquire from your parent,grandparent,family
	house, dna, genes, property
	no effort, no work
	REUSABLE

IphoneX
	call
	message
	browse
	camera
	fingerprintscan

Iphone11
	call NO CODE NEEDED .. INHERIT from IphoneX
	message NO CODE NEEDED .. INHERIT from IphoneX
	browse NO CODE NEEDED .. INHERIT from IphoneX
	camera NO CODE NEEDED .. INHERIT from IphoneX
	fingerprintscan NO CODE NEEDED .. INHERIT from IphoneX
	facial recognisiiono
	
	
	
CELLPHONE/LAPTOP/
	How it works ? wireless engineer, Laptop Hardware engineer (ENCAPSULATION)
	How to use ? Customer (ABSTRACTION)
	
	
	
	
Has-a
does-a

inheritance
abs
encap
poly

Amazon
	HAS-A buyer,seller,products
	DOES-A login,add2Cart,buy,sell,checkout,payment
		login- poly
		payment-poly
		
	Person
		name
		address
		age
	Buyer inherits from person
		creditcard
		billing address
	Seller inherits from person
		products
		
Amazon
	10000 of IT employee
	
	15 it programmer = login section of website
	15 programmer = check out page ( Abstraction for you.. from banking transfer perspecitve)
	15 programmer = banking transaction page
	
	
	
		
************** HAS-A ... data... variable ************

requirement gathering
requirement analysis
Development


Amazon
	Has-A = variables = memory, store information
	Does-A = methods = processing information
	
Computing device
	cellphone,laptop
	Memory = store information
	CPU = process information
	
vary/varies = change

BankAccount
	Has-A : accountNumber, balance, name, isSuspended, customerAddress ,
	
	name = 
		single character ? char 
		group of character ? String 
		number ? byte, short, int, long
		fraction number ? float,double
		yes/no ? boolean
		complex ? CREATE ANOTHER PROGRAM

// { } = curly bracket or code block
public class BankAccount{
	
	// data type	name of information/data/variable
	     long 		accountNumber; // declaration line
	     float	balance;
	     String  name;
	     boolean  isSuspended;
	     Address customerAddress;
}
.. user defined data type
public class Address{
	String streetName;
	int buildingNumber;
	String city;
	String state;
	int zip;
}

Variables :
	What is Variable
		container/holds information
		something that changes : information stored in variable are bound to change
	Data types
	Data structure
	Values 
	Declaration rules
	Initialization rules
	Assignment rules
	Rules on Data
		Reading data
		changing data
	Scope of Data
		Data that is part of you or defines you - global
		Data that is provided to you by other - parameter
		Data that u hold on temprory basis - local
	Accessing Data
		Within
		
	
 *********** Declaration rules ***********
	Declration line includes.... Data type followed by variable name
	variable cannot be assigned with a value before declaration a data type
	variable names : same program and same block
		u cannot have 2 similar variable names
		can contain alphabets, numbers, $, _
		start with alphabet or $ or _ 
		coding practice
			naming convention - camelCase
			choose a relevant meaningful names
	
	
******** initialization rules ****
	Value assigned to a variable for the FIRST time.
	values should match the data type on LHS
	RHS can be literal value or variable of same type
	
	

Methods :
	********* Method Declaration	*********
		how to recognize methods : Does-A exercise
		how to code methods :
			What to name this activity ??? <<NAME>>
			how many inputs are required ??? what are the data type of each inputs ???
			how many outputs are required ??? what is the data type of each output ???
		
		PUBLIC 	OUTPUT 	NAME	(INPUT)
	
	
		NAME : similar rules as variables
			Follow camelCase format in method names
			Alphabets , numbers, $, _ allowed in method names
	
		OUTPUT : CAN ALWAYS BE 0 or 1 
			0 = void  ... 
				public  void hello(String message)
			1 = appropriate data type, int/boolean... 
				public int add(int a, int b)
			more than 1 = complex or multiple infor to return, create an object data type 
				public Profile display(String userid)
				
		INPUT : CAN ALWAYS BE 0 or MORE 
			0 = if no input require, leave it empty
				public int bye(  )
			More = if more than 1 input , separated by comma. data type followed by the name 
				public int add(int number1, int number2)

	********* Method Body - logic/ instructions ********* 
	
		LOGIC : use control flows and operators for logic.
		
		
		RETURN STATEMENT :
		
			if void output - no return required
			if anything but void - return required
				primitive data type - 
					literal value that matches output data type 
						or 
					variable that matches output data type 
				Object /complex data type
					variable that matches output data type 
					
					
						
						
						
						
how to recognize methods : Does-A exercise
		how to code methods :
			What to name this activity ??? <<NAME>>
			how many inputs are required ??? what are the data type of each inputs ???
			how many outputs are required ??? what is the data type of each output ???
		
		PUBLIC 	OUTPUT 	NAME	(INPUT) parenthesis

		
		
		Java programs
	Variable(HAS-A) = holding information
	Methods(DOES-A) = read/change information
	
BankAccount
	balance=100;
	
	withdraw(20)
	public boolean withdraw( int amount)
		balance=80// changing value of variable
	
	deposit(30)
		balance =130// changing value of variable
	
	checkBalance()
		you have 100$ // reading value of variable
		
		
how to code methods :
	What to name this activity ??? checkBalance
	
	how many inputs are required ??? 0
	what are the data type of each inputs ??? 
	
	how many outputs are required ??? 1
	what is the data type of each output ??? int

	public 	OUPUT_DATATYPE 		ACITIVITY_NAME(  	INPUT_DATATYPE 	VARI_NAME)
		
	area of triangle = 
	area of square
	bank simple interest calculator
	
	Method declaration
	0 input 	  = public int checkBalance( )
	1 input 	  = public boolean withdraw( int amount)
more than 1 input = public int areaOfRectangle(int length, int breadth) 
		
	0 output	  = public void	donation(int amount)
	1 output 	  = public int areaOfRectangle(int length, int breadth) 
more than 1 output=	public String,String,int,String getAddress(String custName)		
				public Address getAddress(String custName)
	calculate area of rectangle =  length 3 X breadth 4 = 12
	
	
	get customers address
	input 1= String customerName
	Ouput more = 
	public class Address{
		String city,String street,int zip, String country;
	}
	
	
******** operator statements blocks ***********

Programming line that ends with ; are statements
	declaration 
		int x;
	initialization
		int y=10;
	assignment
		y=20; 
	method call or invocation
		withdraw(100);
		
; in any OTHER places is considered as empty block
{

}

		
Bank 
	balance=100;


	withdraw( 50 ){
		
		if ( withdraw amount is greater than balance )
		{ // error code block
			Error : sorry for the inconvinince, please withdraw within your balance limit
		}
			
		if ( withdraw amount is less than balance )
		{ // success code block
			give cash
			show latest balance
			thank you for using java bank
		}
		
	}


*********** assignment operator **********
LHS	=	RHS

1) LHS should always be a variable
2) LHS should have data type
3) RHS can be variable or literal value of same type
4) RHS data type should match LHS data type
5) RHS can also have expressions OR method call

int a=10; // valid
10=int a; // invalid #1
int b = a; // valid
a=int b ;  // invalid #2
int a="john"; // invalid #4

********** arithmetic operator **********

conditional operator

&&
True and True = True (login webpage attempt)
True and false = false
false and True = false 
false and false = false

||  (unlock by email id OR Phone)
True or True = True
True or false = True
false or True = True
false or false = false

True ex-or True = false
True ex-or false = True
false ex-or True = True
false ex-or false = false


= 28 L to R , 50 R to L

1) () bracket
2) * / mul div
3) + - add sub
4) > < relational
5) &&
6) ||
If symbols at same level = then go from Left to right

10 + 5 * 2 - (6 + 4) > 10 + 20 * 30 || 20 + 30 > 10
10 + 5 * 2 - 10 > 10 + 20 * 30 || 20 + 30 > 10
10 + 10 - 10 > 10 + 20 * 30 || 20 + 30 > 10
10 + 10 - 10 > 10 + 600 || 20 + 30 > 10
20 - 10 > 10 + 600 || 20 + 30 > 10
10 > 10 + 600 || 20 + 30 > 10
10 > 610  || 20 + 30 > 10
10 > 610 || 50 > 10
false || 50 > 10
false || true
true





10 + 5 * 2 - (6 + 4) > 10 + 20 * 30 || 20 + 30 > 10
10 + 5 * 2 - (6 + 4) > 10 + 20 * 30 || 50 > 10
10 + 5 * 2 - (6 + 4) > 10 + 20 * 30 || true 

****************** control flows ***********

switch case is faster than if-else if
	suitable ONLY for primitive variables == operator
		
switch case not suitable for different operator expressions

int a=10;
String name="john";
+ = concatenation, joining, append

System.out.println("hi how are "+"bye bye");
hi how are bye bye

System.out.println("hi how are "+a);
hi how are 10

System.out.println("hi how are "+name);
hi how are john



Loop
	FOR		= FIXED number of iterations ( booking flight... fixed seats )
	WHILE	= 0 or more number of iterations (Shopping add2 cart )
	DO-WHILE  = 1 or more number of iterations ( ATM )
	

for(Initialization;	ConditionCheck;	Modification)
{
	Execution
}


for( int i=0; i < 4 ; i=i+2){
	Sysout("hello");
}

ICE	:	i=0,true,print hello	
MCE	:	i=2,true,print hello
MCE	:	i=4,false
MCE	:	
MCE	:	
MCE


Continue : Skips all remaining line in the for execution block
Break : exits the for loop entirely
	

for( int i=0; i < 4 ; i++){
	Sysout("hello");
	if(i==2){
		continue;
	}
	Sysout("hi");
}

ICE	:	i=0,true,print hello print hi
MCE	:	i=1,true,print hello print hi
MCE	:	i=2,true,print hello
MCE	:	i=3,true,print hello print hi
MCE	:	i=4,false
MCE

for( int i=0; i < 4 ; i++){
	Sysout("hello");
	if(i==2){
		break;
	}
	Sysout("hi");
}

ICE	:	i=0,true,print hello print hi
MCE	:	i=1,true,print hello print hi
MCE	:	i=2,true,print hello
MCE	:	
MCE	:	
MCE


0 or MORE
while(condition_check){

	While Execution block

}

1 or MORE
do{

	Do while execution block

}while(condition_check);

/******* NEW INHERITANCE RULES FOR = AND METHOD CALL*****

	int x=10;
	int y=20;
	x=y; // LHS data type should match RHS data type
	
	int p=20;
	add(p); // Method call - 
		 // data type of passing variable "p" should match 
		 // method parameter data type "a"

	public void add(int a){
	
	}
	
**** RHS data type can be child of LHS data type
	Iphone >>> Iphone3 >>>> Iphone5
	Iphone i=new Iphone3();
	
		
******* passing variable data type can be child of parameter data type
	Car class >>>> Nissan class
	Car ca=new Car();
	Nissan n=new Nissan();
	drive(n);

	public void drive(Car c)


Compiletime  polymorphsm
	same method name
	different input
	can happen in same class or parent child class
	
	
Runtime polymorphsm
	same method name, input, output
	cannot be done in same class needs to be in parent and child class


interface IIphone (wish list or to-do list)
	public void text();
	public void call();
	public default void internetBrowse
		sysout("aasdad");
	
	
class Iphone3 implements IIphone
	public void text
		adsadasd
	public void call
		asqwe

class Iphone4 extends Iphone3
	public void maps
		adasdasdasd
class Iphone5 extends Iphone4
	public void applePay
		adasdasdasd
class IphoneX extends Iphone5
	public void facialRecognition
		adasdasdasd

Backward compatibility = fix for this limitation is to provide default methods in interface that can have method
	body.
	
	
	
	
NissanAltima basic
NissanAltima SE
	better speaker
NissanAltima XE
	better speaker and auto parallel parking 
NissanAltima Limited edition
	better speaker and auto parallel parking  and panaromic roof
	
90% of component COMMON or same in all above models ?
10% of customized with new feature more money

Abstract = Generalization/common


NissanAltima basic
NissanAltima SE
NissanAltima XE
NissanAltima Limited edition

4 big / huge factories for 4 models above
	
1 big / huge factory to build 90% of common componets (ABSTRACT class)
	
3 small factories to build 10% of customization

************************************


********WITH ABSTRACT********

IPayment
	public void takeContactDetails;
	public void address;
	public void register;
	public void transferMoney;
	
class abstract APayment
	public void takeContactDetails
		collect phone  and emailds
	public void address
		collect home address
	public void register
		collect userid and password
class CreditCard extends APayment
	public void transferMoney
		charge customer's credit card
	
class Paypal extends APayment
	public void transferMoney
		charge customer's paypal account
	
class Crupto extends APayment
	public void transferMoney
		charge customer crypto wallet

	
	
	********WITHOUT ABSTRACT********
IPayment
	public void takeContactDetails;
	public void address;
	public void transferMoney;
	
class CreditCard implement IPayment
	public void takeContactDetails
		collect phone and emailds
	public void address
		collect home address
	public void transferMoney
		charge customer's credit card
	
class Paypal implement IPayment
	public void takeContactDetails
		collect phone and emailds
	public void address
		collect home address
	public void transferMoney
		charge customer's paypal account
	
class Crupto implement IPayment
	public void takeContactDetails
		collect phone and emailds
	public void address
		collect home address
	public void transferMoney
		charge customer crypto wallet
	
**************************************
PACKAGE

www.amazon.com

com.amazon.www.homePage
	Login.java
	Register.java
com.amazon.www.browsePage
	Shopping.java
	Add2Cart.java
com.amazon.www.checkOutPage
	payment.java
	CancelOrder.java
	PlaceOrder.java


Iphone > Iphone5 > IphoneX
Car > Nissan > NissanZ60

Child is-a Parent
Nissan is-a Car
NissanZ60 is-a Car
NissanZ60 is-a Nissan

IphoneX is-a Iphone
IphoneX is-a Nissan


ANY 2 programs if they are connected to each other
	IS-A : inheritance (extends/implements)
	HAS-A : create reference variable... with new operator
	
****************************************************************
if a constructor is made private ... no connection can be built outside the  program
	neither IS-A nor HAS-A
****************************************************************	
	
	
	
	
	
*********************** Static and final ***********************






